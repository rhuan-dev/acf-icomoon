<?php
/**
 * ACF IcoMoon Select Field
 *
 * @package    ACF_IcoMoon
 * @subpackage Fields
 * @author     Rhuan Carlos Batista <rhcarlosweb@gmail.com>
 * @version    0.0.1-alpha
 */

defined('ABSPATH') || exit;

if (!class_exists('acf_field_icomoon_select')):
    class acf_field_icomoon_select extends acf_field
    {
        /**
         * Initialize the field type.
         *
         * @param array $settings Field settings array.
         */
        public function __construct($settings)
        {
            $this->name = 'icomoon_select';
            $this->label = __('IcoMoon', 'rhicomoon');
            $this->category = 'content';
            $this->defaults = [
                'json_url' => '',
                'allow_null' => 0,
                'return_format' => 'class', // class, unicode, or both
                'placeholder' => __('Select an icon', 'rhicomoon')
            ];
            $this->settings = $settings;

            parent::__construct();
        }

        /**
         * Render field settings in ACF field configuration.
         *
         * @param array $field The field settings array.
         */
        public function render_field_settings($field)
        {
            // JSON URL Setting
            acf_render_field_setting($field, [
                'label' => __('IcoMoon JSON URL', 'rhicomoon'),
                'instructions' => __('Enter the URL of the selection.json file generated by IcoMoon App. Make sure to include the font-face styles in your theme.', 'rhicomoon'),
                'type' => 'url',
                'name' => 'json_url',
                'required' => 1
            ]);

            // Allow Null Setting
            acf_render_field_setting($field, [
                'label' => __('Allow Null?', 'rhicomoon'),
                'instructions' => __('Allow null value to be selected?', 'rhicomoon'),
                'name' => 'allow_null',
                'type' => 'true_false',
                'ui' => 1
            ]);

            // Return Format Setting
            acf_render_field_setting($field, [
                'label' => __('Return Format', 'rhicomoon'),
                'instructions' => __('Specify the returned value format', 'rhicomoon'),
                'type' => 'select',
                'name' => 'return_format',
                'choices' => [
                    'class' => __('CSS Class', 'rhicomoon'),
                    'unicode' => __('Unicode', 'rhicomoon'),
                    'both' => __('Array (Both)', 'rhicomoon')
                ]
            ]);

            // Placeholder Text
            acf_render_field_setting($field, [
                'label' => __('Placeholder Text', 'rhicomoon'),
                'instructions' => __('Shown when no icon is selected', 'rhicomoon'),
                'type' => 'text',
                'name' => 'placeholder'
            ]);
        }

        /**
         * Render the field input.
         *
         * @param array $field The field array.
         */
        public function render_field($field)
        {
            // Merge defaults
            $field = array_merge($this->defaults, $field);

            // Begin field wrapper
            echo '<div class="acf-icomoon-select-wrapper">';

            // Render the select input
            printf(
                '<select id="%s" name="%s" class="rhicomoon-select-field%s" data-json-url="%s" data-placeholder="%s"%s>',
                esc_attr($field['id']),
                esc_attr($field['name']),
                !empty($field['class']) ? ' ' . esc_attr($field['class']) : '',
                esc_url($field['json_url']),
                esc_attr($field['placeholder']),
                $field['allow_null'] ? '' : ' required'
            );

            // Add placeholder option if allow_null is true
            if ($field['allow_null']) {
                printf(
                    '<option value="">%s</option>',
                    esc_html($field['placeholder'])
                );
            }

            // If we have a value, we'll add it as a option - the rest will be populated via JS
            if (!empty($field['value'])) {
                printf(
                    '<option value="%s" selected>%s</option>',
                    esc_attr($field['value']),
                    esc_html($field['value'])
                );
            }

            echo '</select>';

            // Preview area
            echo '<div class="acf-icomoon-preview"></div>';

            echo '</div>';
        }

        /**
         * Enqueue admin scripts and styles.
         */
        public function input_admin_enqueue_scripts()
        {
            $url = $this->settings['url'];
            $version = $this->settings['version'];

            // Allow filtering of assets URL
            $url = apply_filters('rhicomoon_assets_url', $url);

            // Register & enqueue styles
            wp_register_style(
                'rhicomoon-css',
                "{$url}assets/dist/css/style.css",
                ['acf-input'],
                $version
            );
            wp_enqueue_style('rhicomoon-css');

            // Register & enqueue scripts
            wp_register_script(
                'rhicomoon-js',
                "{$url}assets/dist/js/bundle.min.js",
                ['jquery', 'acf-input'],
                $version,
                true
            );
            wp_enqueue_script('rhicomoon-js');

            // Localize script
            wp_localize_script('rhicomoon-js', 'rhicomoon', [
                'icoMoonJsonFile' => apply_filters('rhicomoon_json_url', ''),
                'i18n' => [
                    'error_loading' => __('Error loading icons', 'rhicomoon'),
                    'no_icons' => __('No icons found', 'rhicomoon'),
                    'loading' => __('Loading icons...', 'rhicomoon')
                ]
            ]);
        }

        /**
         * Format the value for API returns.
         *
         * @param mixed $value The raw value.
         * @param int $post_id The post ID.
         * @param array $field The field array.
         * @return mixed The formatted value.
         */
        public function format_value($value, $post_id, $field)
        {
            if (empty($value)) {
                return null;
            }

            // Return based on format setting
            switch ($field['return_format']) {
                case 'unicode':
                    // Strip 'icon-' prefix and convert to unicode
                    $class = str_replace('icon-', '', $value);
                    return $this->get_unicode_value($class, $field['json_url']);

                case 'both':
                    $class = str_replace('icon-', '', $value);
                    return [
                        'class' => $value,
                        'unicode' => $this->get_unicode_value($class, $field['json_url'])
                    ];

                case 'class':
                default:
                    return $value;
            }
        }

        /**
         * Get unicode value from selection.json for a given icon class.
         *
         * @param string $class The icon class name.
         * @param string $json_url The URL to selection.json.
         * @return string|null The unicode value or null if not found.
         */
        private function get_unicode_value($class, $json_url)
        {
            static $icons_cache = [];

            // Check cache first
            if (!isset($icons_cache[$json_url])) {
                $response = wp_remote_get($json_url);
                if (is_wp_error($response)) {
                    return null;
                }

                $data = json_decode(wp_remote_retrieve_body($response), true);
                if (empty($data['icons'])) {
                    return null;
                }

                $icons_cache[$json_url] = wp_list_pluck($data['icons'], 'properties.code', 'properties.name');
            }

            return isset($icons_cache[$json_url][$class])
                ? sprintf('\\%x', $icons_cache[$json_url][$class])
                : null;
        }
    }

    // Initialize
    new acf_field_icomoon_select($this->settings);
endif;
